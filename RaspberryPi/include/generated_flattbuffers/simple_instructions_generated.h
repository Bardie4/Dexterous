// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIMPLEINSTRUCTIONS_QUAD_DOUBLE_MES_H_
#define FLATBUFFERS_GENERATED_SIMPLEINSTRUCTIONS_QUAD_DOUBLE_MES_H_

#include "flatbuffers/flatbuffers.h"

namespace quad_double_mes {

struct SimpleInstructionMsg;

struct SimpleInstructionMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FINGER_SELECT = 4,
    VT_CONTROLLER_SELECT = 6,
    VT_DATA1 = 8,
    VT_DATA2 = 10,
    VT_DATA3 = 12,
    VT_DATA4 = 14
  };
  int16_t finger_select() const {
    return GetField<int16_t>(VT_FINGER_SELECT, 0);
  }
  int16_t controller_select() const {
    return GetField<int16_t>(VT_CONTROLLER_SELECT, 0);
  }
  double data1() const {
    return GetField<double>(VT_DATA1, 0.0);
  }
  double data2() const {
    return GetField<double>(VT_DATA2, 0.0);
  }
  double data3() const {
    return GetField<double>(VT_DATA3, 0.0);
  }
  double data4() const {
    return GetField<double>(VT_DATA4, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_FINGER_SELECT) &&
           VerifyField<int16_t>(verifier, VT_CONTROLLER_SELECT) &&
           VerifyField<double>(verifier, VT_DATA1) &&
           VerifyField<double>(verifier, VT_DATA2) &&
           VerifyField<double>(verifier, VT_DATA3) &&
           VerifyField<double>(verifier, VT_DATA4) &&
           verifier.EndTable();
  }
};

struct SimpleInstructionMsgBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_finger_select(int16_t finger_select) {
    fbb_.AddElement<int16_t>(SimpleInstructionMsg::VT_FINGER_SELECT, finger_select, 0);
  }
  void add_controller_select(int16_t controller_select) {
    fbb_.AddElement<int16_t>(SimpleInstructionMsg::VT_CONTROLLER_SELECT, controller_select, 0);
  }
  void add_data1(double data1) {
    fbb_.AddElement<double>(SimpleInstructionMsg::VT_DATA1, data1, 0.0);
  }
  void add_data2(double data2) {
    fbb_.AddElement<double>(SimpleInstructionMsg::VT_DATA2, data2, 0.0);
  }
  void add_data3(double data3) {
    fbb_.AddElement<double>(SimpleInstructionMsg::VT_DATA3, data3, 0.0);
  }
  void add_data4(double data4) {
    fbb_.AddElement<double>(SimpleInstructionMsg::VT_DATA4, data4, 0.0);
  }
  explicit SimpleInstructionMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SimpleInstructionMsgBuilder &operator=(const SimpleInstructionMsgBuilder &);
  flatbuffers::Offset<SimpleInstructionMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SimpleInstructionMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<SimpleInstructionMsg> CreateSimpleInstructionMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t finger_select = 0,
    int16_t controller_select = 0,
    double data1 = 0.0,
    double data2 = 0.0,
    double data3 = 0.0,
    double data4 = 0.0) {
  SimpleInstructionMsgBuilder builder_(_fbb);
  builder_.add_data4(data4);
  builder_.add_data3(data3);
  builder_.add_data2(data2);
  builder_.add_data1(data1);
  builder_.add_controller_select(controller_select);
  builder_.add_finger_select(finger_select);
  return builder_.Finish();
}

inline const quad_double_mes::SimpleInstructionMsg *GetSimpleInstructionMsg(const void *buf) {
  return flatbuffers::GetRoot<quad_double_mes::SimpleInstructionMsg>(buf);
}

inline const quad_double_mes::SimpleInstructionMsg *GetSizePrefixedSimpleInstructionMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<quad_double_mes::SimpleInstructionMsg>(buf);
}

inline const char *SimpleInstructionMsgIdentifier() {
  return "INST";
}

inline bool SimpleInstructionMsgBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, SimpleInstructionMsgIdentifier());
}

inline bool VerifySimpleInstructionMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<quad_double_mes::SimpleInstructionMsg>(SimpleInstructionMsgIdentifier());
}

inline bool VerifySizePrefixedSimpleInstructionMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<quad_double_mes::SimpleInstructionMsg>(SimpleInstructionMsgIdentifier());
}

inline void FinishSimpleInstructionMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<quad_double_mes::SimpleInstructionMsg> root) {
  fbb.Finish(root, SimpleInstructionMsgIdentifier());
}

inline void FinishSizePrefixedSimpleInstructionMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<quad_double_mes::SimpleInstructionMsg> root) {
  fbb.FinishSizePrefixed(root, SimpleInstructionMsgIdentifier());
}

}  // namespace quad_double_mes

#endif  // FLATBUFFERS_GENERATED_SIMPLEINSTRUCTIONS_QUAD_DOUBLE_MES_H_
