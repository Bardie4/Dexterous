// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIMPLEINSTRUCTIONS_MY_SCHEMAS_H_
#define FLATBUFFERS_GENERATED_SIMPLEINSTRUCTIONS_MY_SCHEMAS_H_

#include "flatbuffers/flatbuffers.h"

namespace my_schemas {

struct SimpleInstructionMsg;

struct SimpleInstructionMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FINGER_SELECT = 4,
    VT_CONTROLLER_SELECT = 6,
    VT_DATA1 = 8,
    VT_DATA2 = 10,
    VT_DATA3 = 12,
    VT_DATA4 = 14,
    VT_DATA5 = 16,
    VT_DATA6 = 18,
    VT_DATA7 = 20,
    VT_DATA8 = 22,
    VT_DATA9 = 24,
    VT_DATA10 = 26
  };
  int16_t finger_select() const {
    return GetField<int16_t>(VT_FINGER_SELECT, 0);
  }
  int16_t controller_select() const {
    return GetField<int16_t>(VT_CONTROLLER_SELECT, 0);
  }
  float data1() const {
    return GetField<float>(VT_DATA1, 0.0f);
  }
  float data2() const {
    return GetField<float>(VT_DATA2, 0.0f);
  }
  float data3() const {
    return GetField<float>(VT_DATA3, 0.0f);
  }
  float data4() const {
    return GetField<float>(VT_DATA4, 0.0f);
  }
  float data5() const {
    return GetField<float>(VT_DATA5, 0.0f);
  }
  float data6() const {
    return GetField<float>(VT_DATA6, 0.0f);
  }
  float data7() const {
    return GetField<float>(VT_DATA7, 0.0f);
  }
  float data8() const {
    return GetField<float>(VT_DATA8, 0.0f);
  }
  float data9() const {
    return GetField<float>(VT_DATA9, 0.0f);
  }
  float data10() const {
    return GetField<float>(VT_DATA10, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_FINGER_SELECT) &&
           VerifyField<int16_t>(verifier, VT_CONTROLLER_SELECT) &&
           VerifyField<float>(verifier, VT_DATA1) &&
           VerifyField<float>(verifier, VT_DATA2) &&
           VerifyField<float>(verifier, VT_DATA3) &&
           VerifyField<float>(verifier, VT_DATA4) &&
           VerifyField<float>(verifier, VT_DATA5) &&
           VerifyField<float>(verifier, VT_DATA6) &&
           VerifyField<float>(verifier, VT_DATA7) &&
           VerifyField<float>(verifier, VT_DATA8) &&
           VerifyField<float>(verifier, VT_DATA9) &&
           VerifyField<float>(verifier, VT_DATA10) &&
           verifier.EndTable();
  }
};

struct SimpleInstructionMsgBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_finger_select(int16_t finger_select) {
    fbb_.AddElement<int16_t>(SimpleInstructionMsg::VT_FINGER_SELECT, finger_select, 0);
  }
  void add_controller_select(int16_t controller_select) {
    fbb_.AddElement<int16_t>(SimpleInstructionMsg::VT_CONTROLLER_SELECT, controller_select, 0);
  }
  void add_data1(float data1) {
    fbb_.AddElement<float>(SimpleInstructionMsg::VT_DATA1, data1, 0.0f);
  }
  void add_data2(float data2) {
    fbb_.AddElement<float>(SimpleInstructionMsg::VT_DATA2, data2, 0.0f);
  }
  void add_data3(float data3) {
    fbb_.AddElement<float>(SimpleInstructionMsg::VT_DATA3, data3, 0.0f);
  }
  void add_data4(float data4) {
    fbb_.AddElement<float>(SimpleInstructionMsg::VT_DATA4, data4, 0.0f);
  }
  void add_data5(float data5) {
    fbb_.AddElement<float>(SimpleInstructionMsg::VT_DATA5, data5, 0.0f);
  }
  void add_data6(float data6) {
    fbb_.AddElement<float>(SimpleInstructionMsg::VT_DATA6, data6, 0.0f);
  }
  void add_data7(float data7) {
    fbb_.AddElement<float>(SimpleInstructionMsg::VT_DATA7, data7, 0.0f);
  }
  void add_data8(float data8) {
    fbb_.AddElement<float>(SimpleInstructionMsg::VT_DATA8, data8, 0.0f);
  }
  void add_data9(float data9) {
    fbb_.AddElement<float>(SimpleInstructionMsg::VT_DATA9, data9, 0.0f);
  }
  void add_data10(float data10) {
    fbb_.AddElement<float>(SimpleInstructionMsg::VT_DATA10, data10, 0.0f);
  }
  explicit SimpleInstructionMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SimpleInstructionMsgBuilder &operator=(const SimpleInstructionMsgBuilder &);
  flatbuffers::Offset<SimpleInstructionMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SimpleInstructionMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<SimpleInstructionMsg> CreateSimpleInstructionMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t finger_select = 0,
    int16_t controller_select = 0,
    float data1 = 0.0f,
    float data2 = 0.0f,
    float data3 = 0.0f,
    float data4 = 0.0f,
    float data5 = 0.0f,
    float data6 = 0.0f,
    float data7 = 0.0f,
    float data8 = 0.0f,
    float data9 = 0.0f,
    float data10 = 0.0f) {
  SimpleInstructionMsgBuilder builder_(_fbb);
  builder_.add_data10(data10);
  builder_.add_data9(data9);
  builder_.add_data8(data8);
  builder_.add_data7(data7);
  builder_.add_data6(data6);
  builder_.add_data5(data5);
  builder_.add_data4(data4);
  builder_.add_data3(data3);
  builder_.add_data2(data2);
  builder_.add_data1(data1);
  builder_.add_controller_select(controller_select);
  builder_.add_finger_select(finger_select);
  return builder_.Finish();
}

inline const my_schemas::SimpleInstructionMsg *GetSimpleInstructionMsg(const void *buf) {
  return flatbuffers::GetRoot<my_schemas::SimpleInstructionMsg>(buf);
}

inline const my_schemas::SimpleInstructionMsg *GetSizePrefixedSimpleInstructionMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<my_schemas::SimpleInstructionMsg>(buf);
}

inline const char *SimpleInstructionMsgIdentifier() {
  return "INST";
}

inline bool SimpleInstructionMsgBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, SimpleInstructionMsgIdentifier());
}

inline bool VerifySimpleInstructionMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<my_schemas::SimpleInstructionMsg>(SimpleInstructionMsgIdentifier());
}

inline bool VerifySizePrefixedSimpleInstructionMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<my_schemas::SimpleInstructionMsg>(SimpleInstructionMsgIdentifier());
}

inline void FinishSimpleInstructionMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<my_schemas::SimpleInstructionMsg> root) {
  fbb.Finish(root, SimpleInstructionMsgIdentifier());
}

inline void FinishSizePrefixedSimpleInstructionMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<my_schemas::SimpleInstructionMsg> root) {
  fbb.FinishSizePrefixed(root, SimpleInstructionMsgIdentifier());
}

}  // namespace my_schemas

#endif  // FLATBUFFERS_GENERATED_SIMPLEINSTRUCTIONS_MY_SCHEMAS_H_
